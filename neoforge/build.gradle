plugins {
	id "net.neoforged.gradle.userdev"
	id "info.u_team.gradle_files"
	id "me.modmuss50.mod-publish-plugin"
	id "maven-publish"
	id "com.github.johnrengelman.shadow" version "8.1.1"
}

gradlefiles.loaderSuffix = "neoforge"

group = rootProject.group
base.archivesName = gradlefiles.archivesName()
version = gradlefiles.version()

sourceSets {
	main {
		java {
			srcDirs += gradlefiles.project("common").sourceSets.common.java.srcDirs
		}
		resources {
			srcDirs += gradlefiles.project("common").sourceSets.common.resources.srcDirs
		}
	}
	data {
		java
		compileClasspath += main.compileClasspath + main.output
		runtimeClasspath += main.runtimeClasspath
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
	withSourcesJar()
	withJavadocJar()
}

configurations {
	shade
	library
	library.extendsFrom(shade)
	implementation.extendsFrom(library)
}

minecraft {
	accessTransformers {
		file("src/main/resources/META-INF/accesstransformer.cfg")
	}
}

subsystems {
	parchment {
		minecraftVersion = config.neoforge.parchment.minecraft_version
		mappingsVersion = config.neoforge.parchment.version
	}
}

runs {
	sourceSets.main.runs.modIdentifier = config.mod.modid
	sourceSets.data.runs.modIdentifier = config.mod.modid
	
	configureEach {
		dependencies {
			runtime configurations.library
		}
	}
	
	client {
		workingDirectory file("run/client").with { mkdirs(); it }
		
		systemProperties "musicplayer.dev", getRootProject().lavaplayerLibraries()
		
		modSources sourceSets.main
	}
	
	server {
		workingDirectory file("run/server").with { mkdirs(); it }
		
		modSources sourceSets.main
	}
	
	data {
		workingDirectory file("run/data").with { mkdirs(); it }
		
		systemProperties "musicplayer.dev", getRootProject().lavaplayerLibraries()
		
		programArguments "--mod", config.mod.modid
		programArguments "--all"
		programArguments "--output", gradlefiles.project("common").file("src/common_generated/resources").absolutePath
		programArguments "--validate"
		programArguments "--existing", gradlefiles.project("common").file("src/common/resources").absolutePath
		
		systemProperties "coremod.uteamcore.dataprovider-set-indent", "coremod.uteamcore.dataprovider-set-indent.value"
		systemProperties "coremod.uteamcore.dataprovider-set-indent.value", "true"
		
		modSources sourceSets.main
		modSources sourceSets.data
	}
}

evaluationDependsOn(":musicplayer-lavaplayer")

tasks.matching { task -> task.name == "idePostSync" }.configureEach {
	dependsOn project(":musicplayer-lavaplayer").tasks.named("assemble")
}

tasks.named("shadowJar").configure {
	dependsOn tasks.named("jar")
	dependsOn project(":musicplayer-lavaplayer-api").tasks.named("assemble")
	dependsOn project(":musicplayer-lavaplayer").tasks.named("assemble")
	
	archiveClassifier = tasks.named("jar").flatMap { jar -> jar.archiveClassifier }
	destinationDirectory = tasks.named("jar").flatMap { jar -> jar.destinationDirectory }
	
	configurations = [project.configurations.shade]
	
	from sourceSets.main.output
	from project(":musicplayer-lavaplayer").file("src/main/resources/LICENSE-DEPENDENCIES")
	
	doFirst {
		from project(":musicplayer-lavaplayer-api").sourceSets.main.output
	}
	
	into ("dependencies") {
		final def buildDir = project(":musicplayer-lavaplayer").layout.buildDirectory
		from buildDir.dir("libs").get().file("musicplayer-lavaplayer.jar.packed")
		from buildDir.dir("dependencies")
	}
	
	relocate "net.harawata.appdirs", "info.u_team.music_player.shade.net.harawata.appdirs"
	
	exclude "META-INF/maven/**"
}

components.named("java").configure {
	withVariantsFromConfiguration(configurations.named("shadowRuntimeElements").get()) {
		skip()
	}
}

tasks.withType(Jar).configureEach { task ->
	gradlefiles.defaultJar(task)
}

tasks.withType(Javadoc).configureEach { task ->
	task.options.addStringOption("Xdoclint:none", "-quiet")
}

signjar.sign(tasks.named("shadowJar"))

processResources {
	doLast {
		fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
			file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
		}
	}
}

dependencies {
	implementation gradlefiles.neoForgeDependency()
	
	implementation "info.u-team:u_team_core-neoforge-1.20.4:5.3.0.300"
	
	library project(":musicplayer-lavaplayer-api")
	shade ("net.harawata:appdirs:1.2.2") {
		transitive=false
	}
}

publishMods {
	file = tasks.named("jar").flatMap { jar -> jar.archiveFile }
	displayName = "${config.publish.display}-NeoForge-${config.minecraft.version}-${project.version}"
	changelog = "[Changelog for version ${project.version}](${gradlefiles.changelogUrl()})"
	type = me.modmuss50.mpp.ReleaseType.of(config.publish.type)
	modLoaders.add("neoforge")
	
	curseforge {
		accessToken = defaultPropertyValue("curseforge.token")
		
		projectId = config.curse.id
		projectSlug = config.curse.slug
		minecraftVersions.add(config.minecraft.version)
		javaVersions.add(JavaVersion.VERSION_17)
		
		requires("u-team-core")
	}
	
	modrinth {
		accessToken = defaultPropertyValue("modrinth.token")
		
		projectId = config.modrinth.id
		minecraftVersions.add(config.minecraft.version)
		
		requires("u-team-core")
	}
	
	discord {
		webhookUrl = defaultPropertyValue("discord.update_webhook")
		
		username = "Mod Update"
		avatarUrl = "https://raw.githubusercontent.com/MC-U-Team/${config.github.name}/${config.github.branch}/logo.png"
		
		content = changelog.map { log -> "# ${config.minecraft.version}: ${config.publish.display} (NeoForge)\n" + log}
	}
}

publishing {
	repositories {
		maven {
			url "https://repo.u-team.info"
			credentials {
				username = "maven"
				password = defaultPropertyValue("maven.password")
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId project.base.archivesName.get()
			
			from gradlefiles.filteredJavaComponent {
				filterDependency { holder ->
					"appdirs" == holder.dependency.name
				}
				filterDependency { holder ->
					"musicplayer-lavaplayer-api" == holder.dependency.name
				}
			}
			
			pom {
				pom.name = project.base.archivesName.get()
				rootProject.commonPom(it)
			}
		}
	}
}