plugins {
	id "net.minecraftforge.gradle"
	id "org.parchmentmc.librarian.forgegradle"
	id "org.spongepowered.mixin"
	id "info.u_team.gradle_files"
	id "info.u_team.curse_gradle_uploader"
	id "maven-publish"
	id "com.github.johnrengelman.shadow" version "7.1.2"
}

group = "info.u-team"
archivesBaseName = gradlefiles.archivesBaseName()
version = gradlefiles.version()

gradlefiles {
	vendor "Team UTeam"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
	withSourcesJar()
	withJavadocJar()
}

minecraft {
	mappings channel: config.forge.mapping_channel, version: config.forge.mapping
	
	accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
	
	runs {
		client = {
			workingDirectory file("run/client")
			property "musicplayer.dev", devPath()
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
		server = {
			workingDirectory file("run/server")
			property "musicplayer.dev", devPath()
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
	}
}

def devPath() {
	def buildDir = project(":musicplayer-lavaplayer").buildDir
	def libs = new File(buildDir, "libs").absolutePath
	def dependencies = new File(buildDir, "dependencies").absolutePath
	return "${libs};${dependencies}"
}

minecraft.getRuns().each { task ->
	task.environment "MC_VERSION", "{mc_version}"
}

configurations {
	shade
	tinyfd
	library
	library.extendsFrom(shade)
	library.extendsFrom(tinyfd)
	implementation.extendsFrom(library)
}

tasks.register("deleteTinyfd", Delete) {
	delete fileTree("build/tinyfd")
}

tasks.register("extractTinyfd", Copy) {
	dependsOn "deleteTinyfd"
	destinationDir = file("${project.buildDir}/tinyfd")
	
	from configurations.tinyfd
	
	rename { String fileName ->
		fileName += ".packed"
	}
}

tasks.named("shadowJar") {
	archiveClassifier = ""
	
	configurations = [project.configurations.shade]
	
	dependsOn tasks.named("jar")
	dependsOn tasks.named("extractTinyfd")
	dependsOn ":musicplayer-lavaplayer-api:assemble"
	dependsOn ":musicplayer-lavaplayer:assemble"
	
	from sourceSets.main.output
	from project(":musicplayer-lavaplayer").file("src/main/resources/LICENSE-DEPENDENCIES")
	
	doFirst {
		from project(":musicplayer-lavaplayer-api").sourceSets.main.output
	}
	
	into ("dependencies") {
		from project(":musicplayer-lavaplayer").file("build/libs/musicplayer-lavaplayer.jar.packed")
		from project(":musicplayer-lavaplayer").file("build/dependencies")
	}
	
	into ("tinyfd") {
		from "build/tinyfd"
	}
	
	relocate "org.slf4j", "info.u_team.music_player.shade.org.slf4j"
	relocate "net.harawata.appdirs", "info.u_team.music_player.shade.net.harawata.appdirs"
	
	exclude "META-INF/maven/**"
}

components.java.withVariantsFromConfiguration(configurations.getByName("shadowRuntimeElements")) {
	skip()
}

tasks.matching { task ->
	task.name == "prepareRuns"
}.configureEach { task ->
	task.dependsOn(":musicplayer-lavaplayer:assemble")
}

tasks.matching { task ->
	task.name == "reobfJar"
}.configureEach { task ->
	task.dependsOn("shadowJar")
}

tasks.withType(Jar).configureEach { task ->
	gradlefiles.defaultJar(task)
}

tasks.withType(Javadoc).configureEach { task ->
	task.options.addStringOption("Xdoclint:none", "-quiet")
}

tasks.register("prepareSources", Copy) {
	from sourceSets.main.java
	into file("${buildDir}/prepareSources")
	filter (org.apache.tools.ant.filters.ReplaceTokens, tokens: [
		"VERSION": project.version.toString(),
		"MCVERSION": config.minecraft.version.toString()
	])
	outputs.upToDateWhen { false }
}

tasks.named("compileJava").configure { task ->
	final def prepareResources = tasks.getByName("prepareSources")
	task.dependsOn prepareResources
	task.source = prepareResources.destinationDir
}

processResources {
	inputs.property "version", project.version
	inputs.property "mcversion", config.minecraft.version
	
	filesMatching("mcmod.info") {
		expand "version": project.version, "mcversion": config.minecraft.version
	}
}

gradlefiles.signDefaultForgeJar()

sourceSets {
	main {
		java
		resources
	}
}

dependencies {
	minecraft gradlefiles.forgeDependency()
	
	implementation fg.deobf("info.u-team:u_team_core-1.12.2:2.2.5.255")
	
	library project(":musicplayer-lavaplayer-api")
	shade "org.slf4j:slf4j-simple:1.7.36"
	shade ("net.harawata:appdirs:1.0.0") {
		transitive=false
	}
	tinyfd ("org.lwjgl:lwjgl-tinyfd:3.2.2:natives-linux") {
		transitive=false
	}
	tinyfd ("org.lwjgl:lwjgl-tinyfd:3.2.2:natives-macos") {
		transitive=false
	}
	tinyfd ("org.lwjgl:lwjgl-tinyfd:3.2.2:natives-windows") {
		transitive=false
	}
}

minecraft.runs.all {
	lazyToken("minecraft_classpath") {
		configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
	}
}

curseforge {
	apiKey = defaultPropertyValue("curseforge.token")
	
	project {
		id = config.curse.id
		releaseType = config.curse.type
		
		addGameVersion config.minecraft.version
		addGameVersion "Forge"
		addGameVersion "Java 8"
		
		relations {
			requiredDependency "u-team-core"
		}
		
		mainArtifact(tasks.getByName("jar")) {
			displayName = "${config.curse.display}-${config.minecraft.version}-${project.version}"
			changelogType = "html"
			changelog = "<a href=\"${gradlefiles.changelogUrl()}\">Changelog of ${project.version}</a>"
		}
	}
}

publishing {
	repositories {
		maven {
			url "https://repo.u-team.info"
			credentials {
				username = "maven"
				password = defaultPropertyValue("maven.password")
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId archivesBaseName
			
			from components.java
			
			pom {
				name = project.archivesBaseName
				description = "${config.github.name}"
				url = "https://github.com/MC-U-Team/${config.github.name}"
				scm {
					url = "https://github.com/MC-U-Team/${config.github.name}"
					connection = "scm:git:git://github.com/MC-U-Team/${config.github.name}.git"
					developerConnection = "scm:git:git@github.com:MC-U-Team/${config.github.name}.git"
				}
				
				issueManagement {
					system = "github"
					url = "https://github.com/MC-U-Team/${config.github.name}/issues"
				}
				licenses {
					license {
						name = "Apache License 2.0"
						url = "https://github.com/MC-U-Team/${config.github.name}/blob/${config.github.branch}/LICENSE"
						distribution = "repo"
					}
				}
				developers {
					developer {
						name = "HyCraftHD"
					}
				}
			}
		}
	}
}
