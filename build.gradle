buildscript {
	repositories {
		maven {
			url = "https://maven.minecraftforge.net"
		}
		maven {
			url = "https://maven.parchmentmc.org"
		}
		maven {
			url = "https://repo.u-team.info"
		}
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		mavenCentral()
	}
	dependencies {
		classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
		classpath group: "org.parchmentmc", name: "librarian", version: "1.+", changing: true
		classpath group: "info.u-team.curse_gradle_uploader", name: "curse_gradle_uploader", version: "1.5.0"
		classpath group: "gradle.plugin.com.github.johnrengelman", name: "shadow", version: "7.1.2"
	}
}

apply from: "gradle_files/default-project-fg-5.groovy"

apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.parchmentmc.librarian.forgegradle"
apply plugin: "eclipse"
apply plugin: "info.u_team.curse_gradle_uploader"
apply plugin: "maven-publish"
apply plugin: "com.github.johnrengelman.shadow"

group = "info.u-team"
archivesBaseName = generateArchivesBaseName()
version = generateVersion()

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

minecraft {
	mappings channel: config.forge.mapping_channel, version: config.forge.mapping
	
	accessTransformer = file("$rootDir/src/main/resources/META-INF/accesstransformer.cfg")
	
	runs {
		client = {
			workingDirectory file("run/client")
			property "musicplayer.dev", "${project.rootDir}"
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
		server = {
			workingDirectory file("run/server")
			property "musicplayer.dev", "${project.rootDir}"
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
		data = {
			workingDirectory file("run/data")
			property "musicplayer.dev", "${project.rootDir}"
			
			args "--mod", config.mod.modid
			args "--all"
			args "--output", file("src/generated/resources")
			args "--validate"
			args "--existing", file("src/main/resources")
			
			mods {
				"${config.mod.modid}" {
					source sourceSets.main
				}
			}
		}
	}
}

configurations {
	shade
	library
	library.extendsFrom(shade)
	implementation.extendsFrom(library)
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task normalJar(type: ShadowJar) {
	classifier = ""
	
	configurations = [project.configurations.shade]
	
	from sourceSets.main.output
	
	from "LICENSE"
	from "musicplayer-lavaplayer/src/main/resources/LICENSE-DEPENDENCIES"
	
	normalJar.dependsOn ":musicplayer-lavaplayer-api:build"
	normalJar.dependsOn ":musicplayer-lavaplayer:build"
	
	from "musicplayer-lavaplayer-api/build/classes/java/main"
	
	into ("dependencies") {
		from "musicplayer-lavaplayer/build/libs/musicplayer-lavaplayer.jar.packed"
		from "musicplayer-lavaplayer/build/dependencies"
	}
	
	exclude(".cache")
	
	manifest normalManifest
	
	//relocate "org.slf4j", "info.u_team.music_player.shade.org.slf4j"
	relocate "net.harawata.appdirs", "info.u_team.music_player.shade.net.harawata.appdirs"
	
	exclude "META-INF/maven/**"
}

task deobfJar(type: ShadowJar) {
	classifier = "dev"
	
	configurations = [project.configurations.shade]
	
	from sourceSets.main.output
	
	from "LICENSE"
	from "musicplayer-lavaplayer/src/main/resources/LICENSE-DEPENDENCIES"
	
	deobfJar.dependsOn ":musicplayer-lavaplayer-api:build"
	deobfJar.dependsOn ":musicplayer-lavaplayer:build"
	
	from "musicplayer-lavaplayer-api/build/classes/java/main"
	
	into ("dependencies") {
		from "musicplayer-lavaplayer/build/libs/musicplayer-lavaplayer.jar.packed"
		from "musicplayer-lavaplayer/build/dependencies"
	}
	
	exclude(".cache")
	
	manifest normalManifest
	
	//relocate "org.slf4j", "info.u_team.music_player.shade.org.slf4j"
	relocate "net.harawata.appdirs", "info.u_team.music_player.shade.net.harawata.appdirs"
	
	exclude "META-INF/maven/**"
}

task sourcesJar(type: Jar) {
	classifier = "sources"
	
	from sourceSets.main.allJava
	from "LICENSE"
}

task docJar(type: Jar) {
	classifier = "javadoc"
	
	from javadoc
	from "LICENSE"
	
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
		options.addStringOption('encoding', 'UTF-8')
		options.addStringOption('charSet', 'UTF-8')
	}
}

reobf {
	normalJar
}

artifacts {
	archives normalJar
	archives deobfJar
	archives sourcesJar
	archives docJar
}

signAllJars()

sourceSets {
	main {
		java {
			srcDirs += "src/data/java"
		}
		resources {
			srcDirs += "src/generated/resources"
		}
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${config.forge.mcversion}-${config.forge.version}"
	implementation fg.deobf("info.u-team:u_team_core-1.18.1:4.0.0.201-SNAPSHOT")
	library project(":musicplayer-lavaplayer-api")
	shade ("net.harawata:appdirs:1.0.0") {
		transitive=false
	}
}

minecraft.runs.all {
	lazyToken('minecraft_classpath') {
		configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
	}
}

curseforge {
	afterEvaluate {
		tasks."curseforge${config.curse.id}".onlyIf {
			getValue("token") != null
		}
	}
	
	tasks.curseforge.dependsOn build
	
	apiKey = getValueDefault("token")
	
	project {
		id = config.curse.id
		releaseType = config.curse.type
		
		addGameVersion config.forge.mcversion
		addGameVersion "Forge"
		addGameVersion "Java 17"
		
		relations {
			requiredDependency "u-team-core"
			optionalDependency "voice-chat"
		}
		
		mainArtifact(jar) {
			displayName = "${config.curse.display}-${config.forge.mcversion}-${project.version}"
			changelogType = "html"
			changelog = "<a href=\"${generateChangelogUrl()}\">Changelog of ${project.version}</a>"
		}
		
		addArtifact(deobfJar) {
			displayName = "(For development use) ${config.curse.display}-${config.forge.mcversion}-${project.version}-dev"
			changelogType = "text"
			changelog = "ONLY for development environment!\nMappings: ${config.forge.mapping_channel}_${config.forge.mapping}"
		}
	}
}

tasks.withType(PublishToMavenRepository) {
	onlyIf {
		getValue("mavenpass") != null
	}
}

publishing {
	publish.dependsOn build
	
	repositories {
		maven {
			url "https://repo.u-team.info"
			credentials {
				username = "maven"
				password = getValue("mavenpass")
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifact jar
			artifact deobfJar
			artifact sourcesJar
			artifact docJar
			
			groupId = project.group
			artifactId = project.archivesBaseName
			version = project.version
			
			pom {
				name = project.archivesBaseName
				description = "${config.github.name}"
				url = "https://github.com/MC-U-Team/${config.github.name}"
				scm {
					url = "https://github.com/MC-U-Team/${config.github.name}"
					connection = "scm:git:git://github.com/MC-U-Team/${config.github.name}.git"
					developerConnection = "scm:git:git@github.com:MC-U-Team/${config.github.name}.git"
				}
				
				issueManagement {
					system = "github"
					url = "https://github.com/MC-U-Team/${config.github.name}/issues"
				}
				licenses {
					license {
						name = "Apache License 2.0"
						url = "https://github.com/MC-U-Team/${config.github.name}/blob/${config.github.branch}/LICENSE"
						distribution = "repo"
					}
				}
				developers {
					developer {
						name = "HyCraftHD"
					}
				}
			}
		}
	}
}

task uploadBoth {
	tasks.uploadBoth.dependsOn build
	tasks.uploadBoth.dependsOn publish
	tasks.uploadBoth.dependsOn "curseforge${config.curse.id}"
	tasks.uploadBoth.dependsOn setBuildNumber
	tasks.uploadBoth.dependsOn tagRelease
	doLast {
		println "Published both"
	}
}

gradle.taskGraph.whenReady {
	if (gradle.taskGraph.hasTask(":curseforge${config.curse.id}") || gradle.taskGraph.hasTask(":publish")) {
		validateBuild()
	}
}