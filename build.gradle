buildscript {
	apply from: "https://raw.githubusercontent.com/HyCraftHD/Blank-Forge-Project/master/build.methods"
	setup()
	
	repositories {
		maven {
			url = "https://maven.minecraftforge.net"
		}
		maven {
			url = "https://repo.u-team.info"
		}
		maven {
			url = "https://plugins.gradle.org/m2/"
		}
		mavenCentral()
	}
	dependencies {
		classpath "net.minecraftforge.gradle:ForgeGradle:${config.forge.gradle}"
		classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
		classpath "com.github.jengelman.gradle.plugins:shadow:4.0.4"
	}
}

apply from: "https://raw.githubusercontent.com/HyCraftHD/Blank-Forge-Project/master/build.methods"
apply from: "https://raw.githubusercontent.com/HyCraftHD/Blank-Forge-Project/master/git.methods"

setup()
info()

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: "maven"
apply plugin: "com.github.johnrengelman.shadow"

repositories {
	maven { url = "https://repo.u-team.info" }
	mavenCentral()
}

getBuildNumber()

group = "info.u-team"
archivesBaseName = "${config.mod.filename}-${config.forge.mcversion}"
version = "${config.mod.version}.${config.buildnumber}" + getAppendix();

def getAppendix() {
	if("${config.mod.snapshot}".toBoolean()) {
		return "-SNAPSHOT"
	} else {
		return ""
	}
}

sourceCompatibility = targetCompatibility = "1.8"

compileJava {
	sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
	version = config.forge.version
	runDir = "run"
	mappings = "${config.forge.mapping}"
	makeObfSourceJar = false
	
	clientJvmArgs += "\"-Dmusicplayer.dev=${devPath()}\""
	
	replace '${version}', project.version
	replace '${mcversion}', project.minecraft.version
	replaceIn "info/u_team/music_player/MusicPlayerMod.java"
}

def devPath() {
	def buildDir = project(":musicplayer-lavaplayer").buildDir
	def libs = new File(buildDir, "libs").absolutePath
	def dependencies = new File(buildDir, "dependencies").absolutePath
	return "${libs};${dependencies}"
}

def normalManifest = {
	attributes(
			"Specification-Title": config.mod.name,
			"Specification-Vendor": "Team UTeam",
			"Specification-Version": "11.14",
			"Built-On": config.forge.mcversion,
			"Implementation-Title": config.mod.name,
			"Implementation-Version": project.version,
			"Implementation-Vendor": "Team UTeam",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			)
}

configurations {
	shade
	tinyfd
	library
	library.extendsFrom(shade)
	library.extendsFrom(tinyfd)
	implementation.extendsFrom(library)
}

tasks.register("deleteTinyfd", Delete) {
	delete fileTree("build/tinyfd")
}

tasks.register("extractTinyfd", Copy) {
	dependsOn "deleteTinyfd"
	destinationDir = file("${project.buildDir}/tinyfd")
	
	from configurations.tinyfd
	
	rename { String fileName ->
		fileName += ".packed"
	}
}

shadowJar {
	classifier = ""
	
	configurations = [project.configurations.shade]
	
	dependsOn "jar"
	dependsOn "extractTinyfd"
	dependsOn ":musicplayer-lavaplayer-api:build"
	dependsOn ":musicplayer-lavaplayer:build"
	
	from sourceSets.main.output
	from "musicplayer-lavaplayer/src/main/resources/LICENSE-DEPENDENCIES"
	
	doFirst {
		from project(":musicplayer-lavaplayer-api").sourceSets.main.output
	}
	
	into ("dependencies") {
		from "musicplayer-lavaplayer/build/libs/musicplayer-lavaplayer.jar.packed"
		from "musicplayer-lavaplayer/build/dependencies"
	}
	
	into ("tinyfd") {
		from "build/tinyfd"
	}
	
	relocate "org.slf4j", "info.u_team.music_player.shade.org.slf4j"
	relocate "net.harawata.appdirs", "info.u_team.music_player.shade.net.harawata.appdirs"
	
	mergeServiceFiles()
	
	exclude "META-INF/maven/**"
	exclude "META-INF/versions/**"
	
	manifest normalManifest
}

tasks.matching { task ->
	task.name == "setupDecompWorkspace"
}.configureEach { task ->
	task.dependsOn(":musicplayer-lavaplayer:assemble")
}

tasks.matching { task ->
	task.name == "reobfJar"
}.configureEach { task ->
	task.dependsOn("shadowJar")
}

uploadArchives.dependsOn "reobfJar"

task sourcesJar(type: Jar) {
	classifier = "sources"
	
	from sourceSets.main.allJava
	from "LICENSE"
}

task docJar(type: Jar) {
	classifier = "javadoc"
	
	from javadoc
	from "LICENSE"
	
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
		options.addStringOption('encoding', 'UTF-8')
		options.addStringOption('charSet', 'UTF-8')
	}
}

artifacts {
	archives sourcesJar
	archives docJar
	archives shadowJar
}

sourceSets {
	main {
		java
		resources
	}
}

dependencies {
	library project(":musicplayer-lavaplayer-api")
	shade "org.slf4j:slf4j-simple:2.0.13"
	shade ("net.harawata:appdirs:1.0.0") {
		transitive=false
	}
	tinyfd ("org.lwjgl:lwjgl-tinyfd:3.2.2:natives-linux") {
		transitive=false
	}
	tinyfd ("org.lwjgl:lwjgl-tinyfd:3.2.2:natives-macos") {
		transitive=false
	}
	tinyfd ("org.lwjgl:lwjgl-tinyfd:3.2.2:natives-windows") {
		transitive=false
	}
}

processResources {
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version
	
	from(sourceSets.main.resources.srcDirs) {
		include "mcmod.info"
		expand "version":project.version, "mcversion":project.minecraft.version
	}
	from(sourceSets.main.resources.srcDirs) {
		exclude "mcmod.info"
	}
}

compileJava {
	options.encoding = "UTF-8"
}

def getValue(name) {
	def envVariable = System.getenv(name)
	if(envVariable != null) {
		return envVariable
	} else {
		if (project.hasProperty(name)) {
			return project.getProperty(name)
		}
	}
	return null;
}

def getValueDefault(name) {
	def value = getValue(name)
	if(value == null) {
		return "noValue"
	}
	return value
}

tasks.curseforge.dependsOn "reobfJar"

curseforge {
	apiKey = getValueDefault("curseforge.token")
	
	project {
		id = config.curse.id
		releaseType = config.curse.type
		
		addGameVersion minecraft.version
		addGameVersion "Forge"
		addGameVersion "Java 8"
		
		options {
			forgeGradleIntegration = false
		}
		
		mainArtifact(tasks.getByName("jar")) {
			displayName = "${config.curse.display}-${minecraft.version}-${project.version}"
			changelogType = "html"
			changelog = "<a href=\"${config.curse.changelog}\">Changelog of ${project.version}</a>"
		}
	}
}

uploadArchives {
	repositories {
		mavenDeployer {
			if (project.hasProperty("mavenpass")) {
				repository(url: "https://repo.u-team.info") {
					authentication(userName: "maven", password: getValueDefault("maven.password"))
				}
			}
			pom {
				groupId = project.group
				artifactId = project.archivesBaseName
				version = project.version
				project {
					name project.archivesBaseName
					packaging "jar"
					description "Music-Player"
					url "https://github.com/MC-U-Team/Music-Player"
					scm {
						url "https://github.com/MC-U-Team/Music-Player"
						connection "scm:git:git://github.com/MC-U-Team/Music-Player.git"
						developerConnection "scm:git:git@github.com:MC-U-Team/Music-Player.git"
					}
					issueManagement {
						system "github"
						url "https://github.com/MC-U-Team/Music-Player/issues"
					}
					licenses {
						license {
							name "Apache License 2.0"
							url "https://github.com/MC-U-Team/Music-Player/blob/1.8.9-backport/LICENSE"
							distribution "repo"
						}
					}
					
					developers {
						developer {
							name "HyCraftHD"
						}
					}
				}
			}
		}
	}
}

task uploadBoth {
	dependsOn assemble
	dependsOn uploadArchives
	dependsOn "curseforge${config.curse.id}"
	dependsOn setBuildNumber
	doLast {
		println "Published both"
	}
}
