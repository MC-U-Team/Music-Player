buildscript {
	repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
		maven { url = "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:4.1.13"
		classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}

apply from: "https://raw.githubusercontent.com/HyCraftHD/Blank-Forge-Project/master/git.methods"

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: "maven"

repositories {
	maven { url = "https://repo.u-team.info" }
	mavenCentral()
}

loadConfig()

def loadConfig() {
	ext.buildProps = file "build.properties"

	buildProps.withReader {
		def prop = new Properties()
		prop.load(it)
		ext.config = new ConfigSlurper().parse prop
	}
}

getBuildNumber()

group = "info.u-team"
archivesBaseName = "${config.mod.filename}-${config.forge.mcversion}"
version = "${config.mod.version}.${config.buildnumber}" + getAppendix();

def getAppendix() {
	if("${config.mod.snapshot}".toBoolean()) {
		return "-SNAPSHOT"
	} else {
		return ""
	}
}

sourceCompatibility = targetCompatibility = "1.8"

compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = config.forge.version
    runDir = "run"
    mappings = "${config.forge.mapping_channel}_${config.forge.mapping}"
    makeObfSourceJar = false
    
    clientJvmArgs += "\"-Dmusicplayer.dev=${project.rootDir}\""
	
	replace '${version}', project.version
	replace '${mcversion}', project.minecraft.version
	replaceIn "info/u_team/music_player/MusicPlayerMod.java"
}

def normalManifest = {
	attributes(
		"Specification-Title": config.mod.name,
        "Specification-Vendor": "Team UTeam",
        "Specification-Version": "14.0",
		"Built-On": config.forge.mcversion,
		"Implementation-Title": config.mod.name,
    	"Implementation-Version": project.version,
		"Implementation-Vendor": "Team UTeam",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
	)
}

configurations {
    internal
    compile.extendsFrom(internal)
}

jar {
	classifier = ""

    from "LICENSE"
	from "LICENSE-DEPENDENCIES"
	
	jar.dependsOn ":musicplayer-lavaplayer-api:build"
    jar.dependsOn ":musicplayer-lavaplayer:build"
	    
	from "musicplayer-lavaplayer-api/build/classes/java/main"
	
    into ("dependencies/musicplayer") {
		from "musicplayer-lavaplayer/build/libs/musicplayer-lavaplayer.jar"
		from "musicplayer-lavaplayer/build/dependencies"	
	}
	
	into ("dependencies/internal") {
		from configurations.internal		
	}
	
   	manifest normalManifest
}

task deobfJar(type: Jar) {
	classifier = "dev"

    from sourceSets.main.output
    from "LICENSE"
	from "LICENSE-DEPENDENCIES"
	
	deobfJar.dependsOn ":musicplayer-lavaplayer-api:build"
    deobfJar.dependsOn ":musicplayer-lavaplayer:build"
	    
	from "musicplayer-lavaplayer-api/build/classes/java/main"
	
    into ("dependencies/musicplayer") {
		from "musicplayer-lavaplayer/build/libs/musicplayer-lavaplayer.jar"
		from "musicplayer-lavaplayer/build/dependencies"	
	}
	
	into ("dependencies/internal") {
		from configurations.internal		
	}

    manifest normalManifest
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    
    from sourceSets.main.allJava
    from "LICENSE"
}

task docJar(type: Jar) {
    classifier = "javadoc"
    
    from javadoc
    from "LICENSE"
    
    tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
		options.addStringOption('encoding', 'UTF-8')
		options.addStringOption('charSet', 'UTF-8')
	}
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives docJar
    archives jar
}

sourceSets {
   	main {
		java
		resources
   	}
}

dependencies {
	compile "info.u-team:u_team_core-${config.forge.mcversion}:${config.uteamcore.version}:dev"
	compile project(":musicplayer-lavaplayer-api")
	
	internal ("org.lwjgl:lwjgl-tinyfd:3.1.6:natives-linux") {
		transitive=false
	}
	internal ("org.lwjgl:lwjgl-tinyfd:3.1.6:natives-macos") {
		transitive=false
	}
	internal ("org.lwjgl:lwjgl-tinyfd:3.1.6:natives-windows") {
		transitive=false
	}
	internal ("org.slf4j:slf4j-simple:1.7.26")
	internal ("net.harawata:appdirs:1.0.0") {
		transitive=false
	}
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"               
        expand "version":project.version, "mcversion":project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

compileJava {
    options.encoding = "UTF-8"
}

def getValue(name) {
	def envVariable = System.getenv(name)
	if(envVariable != null) {
		return envVariable
	} else {
		if (project.hasProperty(name)) {
			return project.getProperty(name)
		}
	}
	return null;
}

def getValueDefault(name) {
	def value = getValue(name)
	if(value == null) {
		return "noValue"
	}
	return value
}

curseforge {
	apiKey = getValueDefault("token")
	
	tasks.curseforge.dependsOn build
	
  	project {
    	id = config.curse.id
    	releaseType = config.curse.type

		addGameVersion config.forge.mcversion
		
		options {
		    forgeGradleIntegration = false
		}
		
		relations {
      		requiredDependency "u-team-core"
    	}

    	mainArtifact(jar) {
      		displayName = "${config.curse.display}-${config.forge.mcversion}-${project.version}"
      		changelogType = "html"
      		changelog = "<a href=\"${config.curse.changelog}\">Changelog of ${project.version}</a>"
    	}
    	
    	addArtifact(deobfJar) {
    		displayName = "${config.curse.display}-${config.forge.mcversion}-${project.version}-dev"
    		changelogType = "text"
    		changelog = "Mappings: " + config.forge.mapping
    	}
  	}
}

uploadArchives {

	tasks.uploadArchives.dependsOn build

	repositories {
		mavenDeployer {
			if (project.hasProperty("mavenpass")) {
				repository(url: "https://repo.u-team.info") {
					authentication(userName: "maven", password: project.getProperty("mavenpass"))
				}
			}
			pom {
				groupId = project.group
				artifactId = project.archivesBaseName
				version = project.version
				project {
					name project.archivesBaseName
					packaging "jar"
					description "Music-Player"
					url "https://github.com/MC-U-Team/Music-Player"
					scm {
						url "https://github.com/MC-U-Team/Music-Player"
						connection "scm:git:git://github.com/MC-U-Team/Music-Player.git"
						developerConnection "scm:git:git@github.com:MC-U-Team/Music-Player.git"
					}
					issueManagement {
						system "github"
						url "https://github.com/MC-U-Team/Music-Player/issues"
					}
					licenses {
						license {
							name "Apache License 2.0"
							url "https://github.com/MC-U-Team/Music-Player/blob/1.12.2/LICENSE"
							distribution "repo"
						}
					}

					developers {
						developer {
							name "HyCraftHD"
						}
					}
				}
			}
		}
	}
}

task uploadBoth {
	tasks.uploadBoth.dependsOn build
	tasks.uploadBoth.dependsOn uploadArchives
	tasks.uploadBoth.dependsOn "curseforge${config.curse.id}"
	tasks.uploadBoth.dependsOn setBuildNumber
	doLast {
		println "Published both"
	}
}
